/* tslint:disable */
/* eslint-disable */
/**
 * Hydra API
 * Specification of the Hydra REST API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Build } from '../models';
import { Evaluations } from '../models';
import { InlineResponse200 } from '../models';
import { InlineResponse2001 } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse2003 } from '../models';
import { InlineResponse2004 } from '../models';
import { InlineResponse201 } from '../models';
import { InlineResponse2011 } from '../models';
import { InlineResponse500 } from '../models';
import { Jobset } from '../models';
import { JobsetEval } from '../models';
import { JobsetEvalBuilds } from '../models';
import { JobsetOverview } from '../models';
import { LoginBody } from '../models';
import { Project } from '../models';
import { ProjectIdBody } from '../models';
import { SearchResult } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary retrieve a jobset overview for a project
         * @param {string} [project] name of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsetsGet: async (project?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/jobsets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (project !== undefined) {
                localVarQueryParameter['project'] = project;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary trigger jobsets
         * @param {string} [jobsets] project and jobset formatted as \&quot;&lt;project&gt;:&lt;jobset&gt;\&quot; to evaluate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPushPost: async (jobsets?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/push`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobsets !== undefined) {
                localVarQueryParameter['jobsets'] = jobsets;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a build's constituent jobs
         * @param {number} buildId build identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildBuildIdConstituentsGet: async (buildId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildId' is not null or undefined
            if (buildId === null || buildId === undefined) {
                throw new RequiredError('buildId','Required parameter buildId was null or undefined when calling buildBuildIdConstituentsGet.');
            }
            const localVarPath = `/build/{build-id}/constituents`
                .replace(`{${"build-id"}}`, encodeURIComponent(String(buildId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a single build of a jobset by id
         * @param {number} buildId build identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildBuildIdGet: async (buildId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buildId' is not null or undefined
            if (buildId === null || buildId === undefined) {
                throw new RequiredError('buildId','Required parameter buildId was null or undefined when calling buildBuildIdGet.');
            }
            const localVarPath = `/build/{build-id}`
                .replace(`{${"build-id"}}`, encodeURIComponent(String(buildId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all builds belonging to an evaluation identified by eval id
         * @param {number} evalId eval identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evalEvalIdBuildsGet: async (evalId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'evalId' is not null or undefined
            if (evalId === null || evalId === undefined) {
                throw new RequiredError('evalId','Required parameter evalId was null or undefined when calling evalEvalIdBuildsGet.');
            }
            const localVarPath = `/eval/{eval-id}/builds`
                .replace(`{${"eval-id"}}`, encodeURIComponent(String(evalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves evaluations identified by eval id
         * @param {number} evalId eval identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evalEvalIdGet: async (evalId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'evalId' is not null or undefined
            if (evalId === null || evalId === undefined) {
                throw new RequiredError('evalId','Required parameter evalId was null or undefined when calling evalEvalIdGet.');
            }
            const localVarPath = `/eval/{eval-id}`
                .replace(`{${"eval-id"}}`, encodeURIComponent(String(evalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate data for a shields.io badge
         * @param {string} projectId project identifier
         * @param {string} jobsetId jobset identifier
         * @param {string} jobId job identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobProjectIdJobsetIdJobIdShieldGet: async (projectId: string, jobsetId: string, jobId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling jobProjectIdJobsetIdJobIdShieldGet.');
            }
            // verify required parameter 'jobsetId' is not null or undefined
            if (jobsetId === null || jobsetId === undefined) {
                throw new RequiredError('jobsetId','Required parameter jobsetId was null or undefined when calling jobProjectIdJobsetIdJobIdShieldGet.');
            }
            // verify required parameter 'jobId' is not null or undefined
            if (jobId === null || jobId === undefined) {
                throw new RequiredError('jobId','Required parameter jobId was null or undefined when calling jobProjectIdJobsetIdJobIdShieldGet.');
            }
            const localVarPath = `/job/{project-id}/{jobset-id}/{job-id}/shield`
                .replace(`{${"project-id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"jobset-id"}}`, encodeURIComponent(String(jobsetId)))
                .replace(`{${"job-id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a jobset designated by project and jobset id
         * @param {string} projectId name of the project the jobset belongs to
         * @param {string} jobsetId name of the jobset to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsetProjectIdJobsetIdDelete: async (projectId: string, jobsetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling jobsetProjectIdJobsetIdDelete.');
            }
            // verify required parameter 'jobsetId' is not null or undefined
            if (jobsetId === null || jobsetId === undefined) {
                throw new RequiredError('jobsetId','Required parameter jobsetId was null or undefined when calling jobsetProjectIdJobsetIdDelete.');
            }
            const localVarPath = `/jobset/{project-id}/{jobset-id}`
                .replace(`{${"project-id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"jobset-id"}}`, encodeURIComponent(String(jobsetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves all evaluations of a jobset
         * @param {string} projectId project identifier
         * @param {string} jobsetId jobset identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsetProjectIdJobsetIdEvalsGet: async (projectId: string, jobsetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling jobsetProjectIdJobsetIdEvalsGet.');
            }
            // verify required parameter 'jobsetId' is not null or undefined
            if (jobsetId === null || jobsetId === undefined) {
                throw new RequiredError('jobsetId','Required parameter jobsetId was null or undefined when calling jobsetProjectIdJobsetIdEvalsGet.');
            }
            const localVarPath = `/jobset/{project-id}/{jobset-id}/evals`
                .replace(`{${"project-id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"jobset-id"}}`, encodeURIComponent(String(jobsetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a jobset designated by project and jobset id
         * @param {string} projectId name of the project the jobset belongs to
         * @param {string} jobsetId name of the jobset to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsetProjectIdJobsetIdGet: async (projectId: string, jobsetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling jobsetProjectIdJobsetIdGet.');
            }
            // verify required parameter 'jobsetId' is not null or undefined
            if (jobsetId === null || jobsetId === undefined) {
                throw new RequiredError('jobsetId','Required parameter jobsetId was null or undefined when calling jobsetProjectIdJobsetIdGet.');
            }
            const localVarPath = `/jobset/{project-id}/{jobset-id}`
                .replace(`{${"project-id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"jobset-id"}}`, encodeURIComponent(String(jobsetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a jobset in an existing project
         * @param {Jobset} body 
         * @param {string} projectId name of the project to create the jobset in
         * @param {string} jobsetId name of the jobset to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsetProjectIdJobsetIdPut: async (body: Jobset, projectId: string, jobsetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling jobsetProjectIdJobsetIdPut.');
            }
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling jobsetProjectIdJobsetIdPut.');
            }
            // verify required parameter 'jobsetId' is not null or undefined
            if (jobsetId === null || jobsetId === undefined) {
                throw new RequiredError('jobsetId','Required parameter jobsetId was null or undefined when calling jobsetProjectIdJobsetIdPut.');
            }
            const localVarPath = `/jobset/{project-id}/{jobset-id}`
                .replace(`{${"project-id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"jobset-id"}}`, encodeURIComponent(String(jobsetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Log in using username/password credentials
         * @param {LoginBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (body: LoginBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling loginPost.');
            }
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a project
         * @param {string} id project identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling projectIdDelete.');
            }
            const localVarPath = `/project/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a project designated by name
         * @param {string} id project identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling projectIdGet.');
            }
            const localVarPath = `/project/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a project
         * @param {ProjectIdBody} body 
         * @param {string} id project identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectIdPut: async (body: ProjectIdBody, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling projectIdPut.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling projectIdPut.');
            }
            const localVarPath = `/project/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all projects.
         * @summary Retrieves all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * search for evaluations by name
         * @summary search for evaluations
         * @param {string} [_query] string to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGet: async (_query?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (_query !== undefined) {
                localVarQueryParameter['query'] = _query;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary retrieve a jobset overview for a project
         * @param {string} [project] name of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobsetsGet(project?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JobsetOverview>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiJobsetsGet(project, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary trigger jobsets
         * @param {string} [jobsets] project and jobset formatted as \&quot;&lt;project&gt;:&lt;jobset&gt;\&quot; to evaluate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPushPost(jobsets?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiPushPost(jobsets, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves a build's constituent jobs
         * @param {number} buildId build identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildBuildIdConstituentsGet(buildId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Build>>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).buildBuildIdConstituentsGet(buildId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves a single build of a jobset by id
         * @param {number} buildId build identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildBuildIdGet(buildId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Build>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).buildBuildIdGet(buildId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves all builds belonging to an evaluation identified by eval id
         * @param {number} evalId eval identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evalEvalIdBuildsGet(evalId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JobsetEvalBuilds>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).evalEvalIdBuildsGet(evalId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves evaluations identified by eval id
         * @param {number} evalId eval identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evalEvalIdGet(evalId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<JobsetEval>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).evalEvalIdGet(evalId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Generate data for a shields.io badge
         * @param {string} projectId project identifier
         * @param {string} jobsetId jobset identifier
         * @param {string} jobId job identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobProjectIdJobsetIdJobIdShieldGet(projectId: string, jobsetId: string, jobId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).jobProjectIdJobsetIdJobIdShieldGet(projectId, jobsetId, jobId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes a jobset designated by project and jobset id
         * @param {string} projectId name of the project the jobset belongs to
         * @param {string} jobsetId name of the jobset to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsetProjectIdJobsetIdDelete(projectId: string, jobsetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2003>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).jobsetProjectIdJobsetIdDelete(projectId, jobsetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves all evaluations of a jobset
         * @param {string} projectId project identifier
         * @param {string} jobsetId jobset identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsetProjectIdJobsetIdEvalsGet(projectId: string, jobsetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Evaluations>>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).jobsetProjectIdJobsetIdEvalsGet(projectId, jobsetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves a jobset designated by project and jobset id
         * @param {string} projectId name of the project the jobset belongs to
         * @param {string} jobsetId name of the jobset to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsetProjectIdJobsetIdGet(projectId: string, jobsetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Jobset>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).jobsetProjectIdJobsetIdGet(projectId, jobsetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a jobset in an existing project
         * @param {Jobset} body 
         * @param {string} projectId name of the project to create the jobset in
         * @param {string} jobsetId name of the jobset to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsetProjectIdJobsetIdPut(body: Jobset, projectId: string, jobsetId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2004>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).jobsetProjectIdJobsetIdPut(body, projectId, jobsetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Log in using username/password credentials
         * @param {LoginBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(body: LoginBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).loginPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Deletes a project
         * @param {string} id project identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2003>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).projectIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves a project designated by name
         * @param {string} id project identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Project>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).projectIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create a project
         * @param {ProjectIdBody} body 
         * @param {string} id project identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectIdPut(body: ProjectIdBody, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).projectIdPut(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all projects.
         * @summary Retrieves all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Project>>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).rootGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * search for evaluations by name
         * @summary search for evaluations
         * @param {string} [_query] string to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchGet(_query?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SearchResult>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).searchGet(_query, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary retrieve a jobset overview for a project
         * @param {string} [project] name of the project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobsetsGet(project?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<JobsetOverview>> {
            return DefaultApiFp(configuration).apiJobsetsGet(project, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary trigger jobsets
         * @param {string} [jobsets] project and jobset formatted as \&quot;&lt;project&gt;:&lt;jobset&gt;\&quot; to evaluate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPushPost(jobsets?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return DefaultApiFp(configuration).apiPushPost(jobsets, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a build's constituent jobs
         * @param {number} buildId build identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildBuildIdConstituentsGet(buildId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Build>>> {
            return DefaultApiFp(configuration).buildBuildIdConstituentsGet(buildId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a single build of a jobset by id
         * @param {number} buildId build identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buildBuildIdGet(buildId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Build>> {
            return DefaultApiFp(configuration).buildBuildIdGet(buildId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all builds belonging to an evaluation identified by eval id
         * @param {number} evalId eval identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evalEvalIdBuildsGet(evalId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<JobsetEvalBuilds>> {
            return DefaultApiFp(configuration).evalEvalIdBuildsGet(evalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves evaluations identified by eval id
         * @param {number} evalId eval identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evalEvalIdGet(evalId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<JobsetEval>> {
            return DefaultApiFp(configuration).evalEvalIdGet(evalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate data for a shields.io badge
         * @param {string} projectId project identifier
         * @param {string} jobsetId jobset identifier
         * @param {string} jobId job identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobProjectIdJobsetIdJobIdShieldGet(projectId: string, jobsetId: string, jobId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).jobProjectIdJobsetIdJobIdShieldGet(projectId, jobsetId, jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a jobset designated by project and jobset id
         * @param {string} projectId name of the project the jobset belongs to
         * @param {string} jobsetId name of the jobset to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsetProjectIdJobsetIdDelete(projectId: string, jobsetId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2003>> {
            return DefaultApiFp(configuration).jobsetProjectIdJobsetIdDelete(projectId, jobsetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves all evaluations of a jobset
         * @param {string} projectId project identifier
         * @param {string} jobsetId jobset identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsetProjectIdJobsetIdEvalsGet(projectId: string, jobsetId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Evaluations>>> {
            return DefaultApiFp(configuration).jobsetProjectIdJobsetIdEvalsGet(projectId, jobsetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a jobset designated by project and jobset id
         * @param {string} projectId name of the project the jobset belongs to
         * @param {string} jobsetId name of the jobset to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsetProjectIdJobsetIdGet(projectId: string, jobsetId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Jobset>> {
            return DefaultApiFp(configuration).jobsetProjectIdJobsetIdGet(projectId, jobsetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a jobset in an existing project
         * @param {Jobset} body 
         * @param {string} projectId name of the project to create the jobset in
         * @param {string} jobsetId name of the jobset to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobsetProjectIdJobsetIdPut(body: Jobset, projectId: string, jobsetId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2004>> {
            return DefaultApiFp(configuration).jobsetProjectIdJobsetIdPut(body, projectId, jobsetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Log in using username/password credentials
         * @param {LoginBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(body: LoginBody, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return DefaultApiFp(configuration).loginPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a project
         * @param {string} id project identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectIdDelete(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2003>> {
            return DefaultApiFp(configuration).projectIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves a project designated by name
         * @param {string} id project identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Project>> {
            return DefaultApiFp(configuration).projectIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a project
         * @param {ProjectIdBody} body 
         * @param {string} id project identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectIdPut(body: ProjectIdBody, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>> {
            return DefaultApiFp(configuration).projectIdPut(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all projects.
         * @summary Retrieves all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Project>>> {
            return DefaultApiFp(configuration).rootGet(options).then((request) => request(axios, basePath));
        },
        /**
         * search for evaluations by name
         * @summary search for evaluations
         * @param {string} [_query] string to search for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchGet(_query?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<SearchResult>> {
            return DefaultApiFp(configuration).searchGet(_query, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary retrieve a jobset overview for a project
     * @param {string} [project] name of the project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async apiJobsetsGet(project?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<JobsetOverview>> {
        return DefaultApiFp(this.configuration).apiJobsetsGet(project, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary trigger jobsets
     * @param {string} [jobsets] project and jobset formatted as \&quot;&lt;project&gt;:&lt;jobset&gt;\&quot; to evaluate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async apiPushPost(jobsets?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return DefaultApiFp(this.configuration).apiPushPost(jobsets, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves a build's constituent jobs
     * @param {number} buildId build identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async buildBuildIdConstituentsGet(buildId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Build>>> {
        return DefaultApiFp(this.configuration).buildBuildIdConstituentsGet(buildId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves a single build of a jobset by id
     * @param {number} buildId build identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async buildBuildIdGet(buildId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Build>> {
        return DefaultApiFp(this.configuration).buildBuildIdGet(buildId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves all builds belonging to an evaluation identified by eval id
     * @param {number} evalId eval identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async evalEvalIdBuildsGet(evalId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<JobsetEvalBuilds>> {
        return DefaultApiFp(this.configuration).evalEvalIdBuildsGet(evalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves evaluations identified by eval id
     * @param {number} evalId eval identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async evalEvalIdGet(evalId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<JobsetEval>> {
        return DefaultApiFp(this.configuration).evalEvalIdGet(evalId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Generate data for a shields.io badge
     * @param {string} projectId project identifier
     * @param {string} jobsetId jobset identifier
     * @param {string} jobId job identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async jobProjectIdJobsetIdJobIdShieldGet(projectId: string, jobsetId: string, jobId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).jobProjectIdJobsetIdJobIdShieldGet(projectId, jobsetId, jobId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Deletes a jobset designated by project and jobset id
     * @param {string} projectId name of the project the jobset belongs to
     * @param {string} jobsetId name of the jobset to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async jobsetProjectIdJobsetIdDelete(projectId: string, jobsetId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2003>> {
        return DefaultApiFp(this.configuration).jobsetProjectIdJobsetIdDelete(projectId, jobsetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves all evaluations of a jobset
     * @param {string} projectId project identifier
     * @param {string} jobsetId jobset identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async jobsetProjectIdJobsetIdEvalsGet(projectId: string, jobsetId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Evaluations>>> {
        return DefaultApiFp(this.configuration).jobsetProjectIdJobsetIdEvalsGet(projectId, jobsetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves a jobset designated by project and jobset id
     * @param {string} projectId name of the project the jobset belongs to
     * @param {string} jobsetId name of the jobset to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async jobsetProjectIdJobsetIdGet(projectId: string, jobsetId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Jobset>> {
        return DefaultApiFp(this.configuration).jobsetProjectIdJobsetIdGet(projectId, jobsetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Creates a jobset in an existing project
     * @param {Jobset} body 
     * @param {string} projectId name of the project to create the jobset in
     * @param {string} jobsetId name of the jobset to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async jobsetProjectIdJobsetIdPut(body: Jobset, projectId: string, jobsetId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2004>> {
        return DefaultApiFp(this.configuration).jobsetProjectIdJobsetIdPut(body, projectId, jobsetId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Log in using username/password credentials
     * @param {LoginBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async loginPost(body: LoginBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return DefaultApiFp(this.configuration).loginPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Deletes a project
     * @param {string} id project identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async projectIdDelete(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2003>> {
        return DefaultApiFp(this.configuration).projectIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Retrieves a project designated by name
     * @param {string} id project identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async projectIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Project>> {
        return DefaultApiFp(this.configuration).projectIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create a project
     * @param {ProjectIdBody} body 
     * @param {string} id project identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async projectIdPut(body: ProjectIdBody, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2002>> {
        return DefaultApiFp(this.configuration).projectIdPut(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves a list of all projects.
     * @summary Retrieves all projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async rootGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Project>>> {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * search for evaluations by name
     * @summary search for evaluations
     * @param {string} [_query] string to search for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async searchGet(_query?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<SearchResult>> {
        return DefaultApiFp(this.configuration).searchGet(_query, options).then((request) => request(this.axios, this.basePath));
    }
}
